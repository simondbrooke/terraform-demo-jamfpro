name: "05 - release and terraform plan to: production"

on:
  workflow_dispatch:
    inputs:
      debug:
        description: 'Debug mode'
        required: false
        type: boolean
        default: false

env:
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"

permissions:
  pull-requests: write  # required to create a PR
  contents: write       # required to create release and branch
  id-token: write 

jobs:
  check-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Check if running on staging branch
        if: github.ref != 'refs/heads/staging'
        run: |
          echo "Error: This workflow can only be run from the staging branch."
          exit 1

  production-release:
    needs: check-branch
    runs-on: ubuntu-latest
    outputs:
      release_version: ${{ steps.get_release.outputs.release_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.0
        with:
          fetch-depth: 0
          ref: staging

      - name: Get latest release version
        id: get_release
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            const latestRelease = releases.data[0];
            if (latestRelease) {
              console.log(`Latest release version: ${latestRelease.tag_name}`);
              core.setOutput('release_version', latestRelease.tag_name);
            } else {
              core.setFailed('No releases found');
            }

      - name: Create production release branch
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git checkout -b release-${{ steps.get_release.outputs.release_version }}-to-production
          git push origin release-${{ steps.get_release.outputs.release_version }}-to-production
      

  terraform-plan:
    needs: production-release
    uses: ./.github/workflows/terraform-plan.yml
    with:
      tf_cloud_organization: "SimonDBrooke"
      tf_workspace: "terraform-jamfpro-production" 
      target_environment: "production"
      debug: ${{ inputs.debug }}
      config_directory: "workload/terraform/jamfpro"
      release_version: release-${{ needs.production-release.outputs.release_version }}-to-production
    secrets:
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
  
  create-pr:
    needs: [terraform-plan, production-release]
    uses: ./.github/workflows/create-pr.yml
    with:
      target_environment: "production"
      release_version: release-${{ needs.production-release.outputs.release_version }}-to-production
      plan_id: ${{ needs.terraform-plan.outputs.plan_id }}
      add: ${{ needs.terraform-plan.outputs.add }}
      change: ${{ needs.terraform-plan.outputs.change }}
      destroy: ${{ needs.terraform-plan.outputs.destroy }}
      run_link: ${{ needs.terraform-plan.outputs.run_link }}
      tf_workspace: "terraform-jamfpro-production"

  send-notification:
    needs: [production-release, terraform-plan, create-pr]
    if: ${{ always() && (vars.MSTEAMS_WEBHOOK_URL != '' || vars.SLACK_WEBHOOK_URL != '') }}
    uses: ./.github/workflows/send-notification.yml
    with:
      environment: "production"
      result: ${{ needs.terraform-plan.result == 'success' && 'success' || 'failure' }}
      notification_channel: ${{ vars.MSTEAMS_WEBHOOK_URL != '' && 'msteams' || 'slack' }}
      new_version: ${{ needs.production-release.outputs.release_version }}
    secrets: inherit