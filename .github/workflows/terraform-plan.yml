name: Terraform Plan

on:
  workflow_call:
    inputs:
      tf_cloud_organization:
        required: true
        type: string
      tf_workspace:
        required: true
        type: string
      target_environment:
        required: true
        type: string
      debug:
        required: false
        type: boolean
        default: false
      config_directory:
        required: true
        type: string
      release_version:
        required: true
        type: string
    outputs:
      status:
        description: "The result of the operation"
        value: ${{ jobs.terraform-plan.outputs.status }}
      add:
        description: "Resource Additions from the HCP Terraform plan"
        value: ${{ jobs.terraform-plan.outputs.add }}
      change:
        description: "Resource Changes from the HCP Terraform plan"
        value: ${{ jobs.terraform-plan.outputs.change }}
      destroy:
        description: "Resource Destructions from the HCP Terraform plan"
        value: ${{ jobs.terraform-plan.outputs.destroy }}
      plan_id:
        description: "The provided plan ID"
        value: ${{ jobs.terraform-plan.outputs.plan_id }}
      plan_status:
        description: "The status of the Plan"
        value: ${{ jobs.terraform-plan.outputs.plan_status }}
      run_link:
        description: "Link to the Terraform Cloud run"
        value: ${{ jobs.terraform-plan.outputs.run_link }}
    secrets:
      TF_API_TOKEN:
        required: true

env:
  CONFIG_DIRECTORY: ${{ inputs.config_directory }}
  TF_CLOUD_ORGANIZATION: ${{ inputs.tf_cloud_organization }}
  TF_WORKSPACE: ${{ inputs.tf_workspace }}

jobs:
  terraform-plan:
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.plan-output.outputs.status }}
      add: ${{ steps.plan-output.outputs.add }}
      change: ${{ steps.plan-output.outputs.change }}
      destroy: ${{ steps.plan-output.outputs.destroy }}
      plan_id: ${{ steps.plan-output.outputs.plan_id }}
      plan_status: ${{ steps.plan-output.outputs.plan_status }}
      run_link: ${{ steps.plan-run.outputs.run_link }}
    steps:
      - name: Checkout release branch
        uses: actions/checkout@v4.2.0
        with:
          ref: ${{ inputs.release_version }}
          fetch-depth: 0
          
      - name: Harden Runner
        uses: step-security/harden-runner@v2.10.1
        with:
          egress-policy: audit
      
      - name: Set TF_API_TOKEN as environment variable
        run: echo "TF_API_TOKEN=${{ secrets.TF_API_TOKEN }}" >> $GITHUB_ENV
      
      - name: Verify Terraform Cloud API Token
        if: ${{ inputs.debug }}
        run: |
          if [ -z "$TF_API_TOKEN" ]; then
            echo "Error: TF_API_TOKEN is not set"
            exit 1
          else
            echo "TF_API_TOKEN is set (value hidden for security)"
          fi
      
      - name: Check Workspace Existence
        if: ${{ inputs.debug }}
        run: |
          response=$(curl -s \
            --header "Authorization: Bearer ${{ secrets.TF_API_TOKEN }}" \
            --header "Content-Type: application/vnd.api+json" \
            "https://app.terraform.io/api/v2/organizations/$TF_CLOUD_ORGANIZATION/workspaces/$TF_WORKSPACE")
          
          if echo $response | grep -q "Not found"; then
            echo "Error: Workspace $TF_WORKSPACE not found in organization $TF_CLOUD_ORGANIZATION"
            exit 1
          else
            echo "Workspace $TF_WORKSPACE exists in organization $TF_CLOUD_ORGANIZATION"
          fi

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.3.1
        id: plan-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}
          speculative: true

      - name: Create Plan Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.3.1
        id: plan-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
          plan_only: true

      - name: Get Plan Output
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.3.1
        id: plan-output
        with:
          plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}
      
